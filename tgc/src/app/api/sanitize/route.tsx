import type { NextApiRequest, NextApiResponse } from 'next'
import { execSync } from 'child_process';

const generate = (length: number) => {
  let result = '';
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

export function GET() {
  return Response.json({ service: "DOMPurify", ver: "2.0.16.1", note: '', ext: "jpg", secret: generate(32) })
}

export async function POST(req: Request) {

  try {
    const { fileName } = await req.json();
    
    // Extracting file extension using regex
    const fileExtension = fileName.match(/\.[0-9a-z]+$/i)[0];

    const allowedExtensions = ['.jpg', '.jpeg', '.png','.webp','.tiff', '.gif'];
    if (!allowedExtensions.includes(fileExtension.toLowerCase())) {
      return Response.json({ error: 'File is not an image', fileExtension },{status:400});
    }
    return Response.json({ message: 'File is an image',fileExtension },{status:200});
  } catch (error) {
    console.error('Error:', error);
    return Response.json({ error: 'Internal server error' },{status:500});
  }
}

export async function PUT(req: Request) {
  const randomStatusCode = Math.floor(Math.random() * (590 - 400 + 1)) + 400;

  const body = await req.json();
  // if body doesnt have filename, return error
  if (!body.filename) {
    return Response.json({ error: 'Missing filename parameter' }, { status: randomStatusCode });
  }
  const command = `echo "${body.filename}" | grep -q -E '\.jpg|\.png|\.webp|\.jpeg|\.avif|\.tiff' && echo 'Is an image' || echo 'Not an image'`;
  try {
    const output = execSync(command).toString().trim();
    return Response.json({ output });
  } catch (error) {
    console.error('Error executing command:', error);
    return Response.json({ error: 'Internal server error' });
  }
}



